name: CI

on:
  push:
  pull_request:

jobs:
  renode-smoke:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Run Renode smoke test
        uses: antmicro/renode-test-action@v4
        with:
          renode-revision: master
          tests-to-run: tests/smoke.robot

  agent-build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev
      - name: Build Micro XRCE-DDS Agent
        run: |
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig
      - name: Sanity check Agent CLI
        run: MicroXRCEAgent --help | head -n 30

  renode-multinode:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Run Renode Quark 2-node demo
        uses: antmicro/renode-test-action@v4
        with:
          renode-revision: master
          tests-to-run: tests/multinode.robot
  renode-two-nodes:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Run Renode NRF two-node (Robot)
        uses: antmicro/renode-test-action@v4
        with:
          renode-revision: master
          tests-to-run: tests/two_nodes.robot
          artifacts-path: artifacts/two_nodes

      - name: Upload Robot reports (two-nodes)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: renode-two-nodes-reports
          path: artifacts/two_nodes/**
  agent-udp-smoke:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev iproute2

      - name: Build Micro XRCE-DDS Agent
        run: |
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig

      - name: Launch Agent (udp4:8888) briefly and verify port
        run: |
          set -euo pipefail
          # 短暫啟動 Agent（最多 5 秒），讓它綁定 8888/UDP
          timeout 5s MicroXRCEAgent udp4 -p 8888 &
          AGG_PID=$!
          # 等半秒讓 Agent 起來
          sleep 0.5
          # 檢查 8888/udp 是否被綁定
          ss -lun | grep -q ':8888' && echo "UDP 8888 is bound by Agent."
          # 等待背景 timeout 自動收掉 Agent（最多 5 秒）
          wait $AGG_PID || true
  agent-tcp-connect:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev iproute2 python3

      - name: Build Micro XRCE-DDS Agent
        run: |
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig

      - name: Launch Agent (tcp4:8888) and connect with Python socket
        run: |
          set -euo pipefail
          # 背景啟動 Agent（最多 8 秒，由 timeout 收掉）
          timeout 8s MicroXRCEAgent tcp4 -p 8888 &
          AG_PID=$!
          # 等 Agent 起來
          sleep 0.5
          # 用 Python 標準庫建立 TCP 連線到 127.0.0.1:8888，維持 ~1s 後關閉
          python3 - <<'PY'
          import socket, time
          s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
          s.settimeout(5.0)
          s.connect(("127.0.0.1", 8888))
          time.sleep(1.0)   # 保持連線片刻
          s.close()
          PY
          # 確認有 ESTAB 連線曾建立（允許很快關閉，因此用 || true 避免時間窗口誤判）
          ss -ptn | grep -E ':8888\s' || true
          # 等待 Agent 結束（timeout 會 kill）
          wait $AG_PID || true
  xrce-helloworld:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev iproute2

      - name: Build & install Micro XRCE-DDS Agent (per docs)
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig

      - name: Build Micro XRCE-DDS Client examples (per docs)
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Client.git
          cd Micro-XRCE-DDS-Client && mkdir build && cd build
          cmake .. -DUCLIENT_BUILD_EXAMPLES=ON
          make -j"$(nproc)"
          test -x examples/PublishHelloWorld/PublishHelloWorldClient
          test -x examples/SubscribeHelloWorld/SubscribeHelloWorldClient

      - name: Run XRCE HelloWorld end-to-end (Agent + Pub + Sub, same step)
        run: |
          set -euo pipefail
          # 啟動 Agent（UDP 2019，官方 quickstart）
          MicroXRCEAgent udp4 -p 2019 --verbose 4 > agent.log 2>&1 &
          AG_PID=$!
          sleep 0.8
          ss -lun | grep -q ':2019' || (echo "Agent UDP 2019 not bound"; cat agent.log; exit 1)

          # 先跑 Publisher（官方建議先 Publisher），背景跑幾秒讓 Subscriber 有資料可收
          timeout 6s Micro-XRCE-DDS-Client/build/examples/PublishHelloWorld/PublishHelloWorldClient 127.0.0.1 2019 > pub.out 2>&1 &
          PUB_PID=$!
          sleep 0.5

          # 再跑 Subscriber（等待不超過 8 秒）
          timeout 8s Micro-XRCE-DDS-Client/build/examples/SubscribeHelloWorld/SubscribeHelloWorldClient 127.0.0.1 2019 > sub.out 2>&1 || true

          # 確保 publisher 結束、清理 agent
          wait $PUB_PID || true
          kill $AG_PID 2>/dev/null || true
          sleep 0.2
      - name: Collect metrics (baseline)
        run: |
          set -euo pipefail
          mkdir -p artifacts/xrce-helloworld
          python3 tools/metrics/collect_helloworld.py \
            --agent-log agent.log \
            --pub-out pub.out \
            --sub-out sub.out \
            --label baseline \
            --out artifacts/xrce-helloworld/metrics.json

      - name: Upload XRCE HelloWorld artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xrce-helloworld-logs
          path: |
            agent.log
            pub.out
            sub.out
  agent-serial-pty:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev

      - name: Build & install Micro XRCE-DDS Agent
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig

      - name: Run Renode serial PTY bridge test (Robot)
        uses: antmicro/renode-test-action@v4
        with:
          renode-revision: master
          tests-to-run: tests/serial_pty.robot
          artifacts-path: artifacts/serial_pty

      - name: Upload serial-pty artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: serial-pty-logs
          path: artifacts/serial_pty/**
  xrce-helloworld-netem-100ms-1loss:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev iproute2
          chmod +x tools/netem_profiles.sh

      - name: Build & install Micro XRCE-DDS Agent
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig

      - name: Build Micro XRCE-DDS Client examples
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Client.git
          cd Micro-XRCE-DDS-Client && mkdir build && cd build
          cmake .. -DUCLIENT_BUILD_EXAMPLES=ON
          make -j"$(nproc)"

      - name: Apply netem (100ms + 1% loss) and run XRCE HelloWorld end-to-end
        run: |
          set -euo pipefail
          # 1) apply netem
          echo "Applying netem profile delay100ms_loss1 on lo..."
          sudo ./tools/netem_profiles.sh apply delay100ms_loss1
          # 記錄目前 qdisc 設定
          tc qdisc show dev lo | tee netem.txt

          # 2) run Agent + Pub/Sub in the same shell
          MicroXRCEAgent udp4 -p 2019 --verbose 4 > agent.log 2>&1 &
          AG_PID=$!
          sleep 0.8
          ss -lun | grep -q ':2019' || (echo "Agent UDP 2019 not bound"; cat agent.log; exit 1)

          timeout 8s Micro-XRCE-DDS-Client/build/examples/PublishHelloWorld/PublishHelloWorldClient 127.0.0.1 2019 > pub.out 2>&1 &
          PUB_PID=$!
          sleep 0.5
          timeout 10s Micro-XRCE-DDS-Client/build/examples/SubscribeHelloWorld/SubscribeHelloWorldClient 127.0.0.1 2019 > sub.out 2>&1 || true

          wait $PUB_PID || true
          kill $AG_PID 2>/dev/null || true
          sleep 0.2
      - name: Collect metrics (netem delay100ms_loss1)
        run: |
          set -euo pipefail
          mkdir -p artifacts/xrce-helloworld-netem
          python3 tools/metrics/collect_helloworld.py \
            --agent-log agent.log \
            --pub-out pub.out \
            --sub-out sub.out \
            --netem netem.txt \
            --label delay100ms_loss1 \
            --out artifacts/xrce-helloworld-netem/metrics.json
      - name: Clear netem and collect artifacts
        if: always()
        run: |
          sudo ./tools/netem_profiles.sh clear
          mkdir -p artifacts/xrce-helloworld-netem
          mv agent.log pub.out sub.out netem.txt artifacts/xrce-helloworld-netem/ || true

      - name: Upload XRCE HelloWorld (netem) artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xrce-helloworld-netem-logs
          path: artifacts/xrce-helloworld-netem/**
  zephyr-build-baseline:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Zephyr (SDK + west workspace)
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3

      - name: Show west env and boards (for diagnosis)
        run: |
          set -euo pipefail
          west --version
          west topdir
          west list
          echo "---- west boards (first 200) ----"
          west boards | head -n 200 || true
          echo "---- search 52840 ----"
          west boards -n 52840 || true

      - name: Build Zephyr app for native_posix (baseline)
        run: |
          set -euo pipefail
          west build -b native_posix app --pristine always || {
            echo "=== CMake logs (if any) ==="
            find build -name CMakeError.log -print -exec sed -n '1,200p' {} \; || true
            find build -name CMakeOutput.log -print -exec sed -n '1,200p' {} \; || true
            exit 1
          }

      - name: Upload Zephyr build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zephyr-baseline-build
          if-no-files-found: warn
          path: |
            build/zephyr/zephyr*
            build/CMakeCache.txt
            build/CMakeFiles/**
            build/zephyr/.config
            build/zephyr/include/generated/**
            build/zephyr/zephyr.dts
  zephyr-build-microros-qemu:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Zephyr (SDK + west workspace)
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3

      - name: Install micro-ROS build deps (per module README)
        run: |
          python3 -m pip install --upgrade pip
          pip3 install catkin_pkg lark-parser empy colcon-common-extensions vcstool pyyaml ament_package

      - name: West update (fetch micro-ROS module)
        run: |
          west update

      - name: Build micro-ROS sample app (native_posix)
        run: |
          west build modules/libmicroros -b native_posix --pristine always -- \
            -DCONF_FILE="$GITHUB_WORKSPACE/modules/libmicroros/host-udp.conf" \
            -DDTC_OVERLAY_FILE="$GITHUB_WORKSPACE/app/empty.overlay"
      - name: Inspect merged Kconfig (micro-ROS / transport)
        if: always()
        run: |
          if [ -f build/zephyr/.config ]; then
            echo "==== micro-ROS related Kconfig ===="
            grep -E "MICRO|UROS|RMW|TRANSPORT|UDP|SERIAL" build/zephyr/.config || true
            echo "==================================="
          else
            echo "build/zephyr/.config not found (configure may have failed earlier)."
          fi

      - name: Upload merged .config (debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: microros-native-posix-config
          path: build/zephyr/.config
          if-no-files-found: warn
            
      - name: Upload micro-ROS (qemu) artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zephyr-microros-qemu
          path: |
            build/zephyr/zephyr.*
            build/zephyr/.config
            build/zephyr/zephyr.dts
          if-no-files-found: warn
  microros-hostudp-e2e:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install Agent deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends git cmake build-essential libasio-dev libtinyxml2-dev

      - name: Build & install Micro XRCE-DDS Agent
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig

      - name: Setup Zephyr (SDK + west workspace)
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3

      - name: Install micro-ROS build deps
        run: |
          python3 -m pip install --upgrade pip
          pip3 install catkin_pkg lark-parser empy colcon-common-extensions vcstool pyyaml ament_package

      - name: West update (fetch micro-ROS module)
        run: west update

      - name: Build micro-ROS app (native_posix / host-udp)
        run: |
          west build modules/libmicroros -b native_posix --pristine always -- \
            -DCONF_FILE="$GITHUB_WORKSPACE/modules/libmicroros/host-udp.conf" \
            -DDTC_OVERLAY_FILE="$GITHUB_WORKSPACE/app/empty.overlay"

      - name: Run Agent (udp4:8888) and app, collect logs
        run: |
          set -euo pipefail
          # 1) 啟動 Agent（官方 README 也示範 udp4 8888）
          MicroXRCEAgent udp4 -p 8888 -v 6 > agent.log 2>&1 &
          AG_PID=$!
          sleep 0.8

          # 2) 確認 8888/udp 綁定
          ss -lun | grep -q ':8888' || (echo "Agent did not bind 8888/udp"; cat agent.log; exit 1)

          # 3) 跑 native_posix 可執行檔（timeout 讓 CI 不會卡死）
          timeout 10s ./build/zephyr/zephyr.exe > app.out 2>&1 || true

          # 4) 收尾
          kill $AG_PID 2>/dev/null || true
          sleep 0.2

      - name: Upload E2E artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: microros-hostudp-e2e
          path: |
            agent.log
            app.out
            build/zephyr/.config
          if-no-files-found: warn
