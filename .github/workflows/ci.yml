name: CI

on:
  push:
  pull_request:

jobs:
  renode-smoke:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Run Renode smoke test
        uses: antmicro/renode-test-action@v4
        with:
          renode-revision: master
          tests-to-run: tests/smoke.robot

  agent-build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev
      - name: Build Micro XRCE-DDS Agent
        run: |
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig
      - name: Sanity check Agent CLI
        run: MicroXRCEAgent --help | head -n 30

  renode-multinode:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Run Renode Quark 2-node demo
        uses: antmicro/renode-test-action@v4
        with:
          renode-revision: master
          tests-to-run: tests/multinode.robot
  renode-two-nodes:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Run Renode NRF two-node (Robot)
        uses: antmicro/renode-test-action@v4
        with:
          renode-revision: master
          tests-to-run: tests/two_nodes.robot
          artifacts-path: artifacts/two_nodes

      - name: Upload Robot reports (two-nodes)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: renode-two-nodes-reports
          path: artifacts/two_nodes/**
  agent-udp-smoke:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev iproute2

      - name: Build Micro XRCE-DDS Agent
        run: |
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig

      - name: Launch Agent (udp4:8888) briefly and verify port
        run: |
          set -euo pipefail
          # 短暫啟動 Agent（最多 5 秒），讓它綁定 8888/UDP
          timeout 5s MicroXRCEAgent udp4 -p 8888 &
          AGG_PID=$!
          # 等半秒讓 Agent 起來
          sleep 0.5
          # 檢查 8888/udp 是否被綁定
          ss -lun | grep -q ':8888' && echo "UDP 8888 is bound by Agent."
          # 等待背景 timeout 自動收掉 Agent（最多 5 秒）
          wait $AGG_PID || true
  agent-tcp-connect:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev iproute2 python3

      - name: Build Micro XRCE-DDS Agent
        run: |
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig

      - name: Launch Agent (tcp4:8888) and connect with Python socket
        run: |
          set -euo pipefail
          # 背景啟動 Agent（最多 8 秒，由 timeout 收掉）
          timeout 8s MicroXRCEAgent tcp4 -p 8888 &
          AG_PID=$!
          # 等 Agent 起來
          sleep 0.5
          # 用 Python 標準庫建立 TCP 連線到 127.0.0.1:8888，維持 ~1s 後關閉
          python3 - <<'PY'
          import socket, time
          s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
          s.settimeout(5.0)
          s.connect(("127.0.0.1", 8888))
          time.sleep(1.0)   # 保持連線片刻
          s.close()
          PY
          # 確認有 ESTAB 連線曾建立（允許很快關閉，因此用 || true 避免時間窗口誤判）
          ss -ptn | grep -E ':8888\s' || true
          # 等待 Agent 結束（timeout 會 kill）
          wait $AG_PID || true
  xrce-helloworld:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev iproute2

      - name: Build & install Micro XRCE-DDS Agent (per docs)
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig

      - name: Build Micro XRCE-DDS Client examples (per docs)
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Client.git
          cd Micro-XRCE-DDS-Client && mkdir build && cd build
          cmake .. -DUCLIENT_BUILD_EXAMPLES=ON
          make -j"$(nproc)"
          test -x examples/PublishHelloWorld/PublishHelloWorldClient
          test -x examples/SubscribeHelloWorld/SubscribeHelloWorldClient

      - name: Run XRCE HelloWorld end-to-end (Agent + Pub + Sub, same step)
        run: |
          set -euo pipefail
          # 啟動 Agent（UDP 2019，官方 quickstart）
          MicroXRCEAgent udp4 -p 2019 --verbose 4 > agent.log 2>&1 &
          AG_PID=$!
          sleep 0.8
          ss -lun | grep -q ':2019' || (echo "Agent UDP 2019 not bound"; cat agent.log; exit 1)

          # 先跑 Publisher（官方建議先 Publisher），背景跑幾秒讓 Subscriber 有資料可收
          timeout 6s Micro-XRCE-DDS-Client/build/examples/PublishHelloWorld/PublishHelloWorldClient 127.0.0.1 2019 > pub.out 2>&1 &
          PUB_PID=$!
          sleep 0.5

          # 再跑 Subscriber（等待不超過 8 秒）
          timeout 8s Micro-XRCE-DDS-Client/build/examples/SubscribeHelloWorld/SubscribeHelloWorldClient 127.0.0.1 2019 > sub.out 2>&1 || true

          # 確保 publisher 結束、清理 agent
          wait $PUB_PID || true
          kill $AG_PID 2>/dev/null || true
          sleep 0.2
      - name: Collect metrics (baseline)
        run: |
          set -euo pipefail
          mkdir -p artifacts/xrce-helloworld
          python3 tools/metrics/collect_helloworld.py \
            --agent-log agent.log \
            --pub-out pub.out \
            --sub-out sub.out \
            --label baseline \
            --out artifacts/xrce-helloworld/metrics.json

      - name: Upload XRCE HelloWorld artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xrce-helloworld-logs
          path: |
            agent.log
            pub.out
            sub.out
  agent-serial-pty:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev

      - name: Build & install Micro XRCE-DDS Agent
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig

      - name: Run Renode serial PTY bridge test (Robot)
        uses: antmicro/renode-test-action@v4
        with:
          renode-revision: master
          tests-to-run: tests/serial_pty.robot
          artifacts-path: artifacts/serial_pty

      - name: Upload serial-pty artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: serial-pty-logs
          path: artifacts/serial_pty/**
  xrce-helloworld-netem-100ms-1loss:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev iproute2
          chmod +x tools/netem_profiles.sh

      - name: Build & install Micro XRCE-DDS Agent
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig

      - name: Build Micro XRCE-DDS Client examples
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Client.git
          cd Micro-XRCE-DDS-Client && mkdir build && cd build
          cmake .. -DUCLIENT_BUILD_EXAMPLES=ON
          make -j"$(nproc)"

      - name: Apply netem (100ms + 1% loss) and run XRCE HelloWorld end-to-end
        run: |
          set -euo pipefail
          # 1) apply netem
          echo "Applying netem profile delay100ms_loss1 on lo..."
          sudo ./tools/netem_profiles.sh apply delay100ms_loss1
          # 記錄目前 qdisc 設定
          tc qdisc show dev lo | tee netem.txt

          # 2) run Agent + Pub/Sub in the same shell
          MicroXRCEAgent udp4 -p 2019 --verbose 4 > agent.log 2>&1 &
          AG_PID=$!
          sleep 0.8
          ss -lun | grep -q ':2019' || (echo "Agent UDP 2019 not bound"; cat agent.log; exit 1)

          timeout 8s Micro-XRCE-DDS-Client/build/examples/PublishHelloWorld/PublishHelloWorldClient 127.0.0.1 2019 > pub.out 2>&1 &
          PUB_PID=$!
          sleep 0.5
          timeout 10s Micro-XRCE-DDS-Client/build/examples/SubscribeHelloWorld/SubscribeHelloWorldClient 127.0.0.1 2019 > sub.out 2>&1 || true

          wait $PUB_PID || true
          kill $AG_PID 2>/dev/null || true
          sleep 0.2
      - name: Collect metrics (netem delay100ms_loss1)
        run: |
          set -euo pipefail
          mkdir -p artifacts/xrce-helloworld-netem
          python3 tools/metrics/collect_helloworld.py \
            --agent-log agent.log \
            --pub-out pub.out \
            --sub-out sub.out \
            --netem netem.txt \
            --label delay100ms_loss1 \
            --out artifacts/xrce-helloworld-netem/metrics.json
      - name: Clear netem and collect artifacts
        if: always()
        run: |
          sudo ./tools/netem_profiles.sh clear
          mkdir -p artifacts/xrce-helloworld-netem
          mv agent.log pub.out sub.out netem.txt artifacts/xrce-helloworld-netem/ || true

      - name: Upload XRCE HelloWorld (netem) artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xrce-helloworld-netem-logs
          path: artifacts/xrce-helloworld-netem/**
  zephyr-build-baseline:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Zephyr (SDK + west workspace)
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3

      - name: Show west env and boards (for diagnosis)
        run: |
          set -euo pipefail
          west --version
          west topdir
          west list
          echo "---- west boards (first 200) ----"
          west boards | head -n 200 || true
          echo "---- search 52840 ----"
          west boards -n 52840 || true

      - name: Build Zephyr app for native_posix (baseline)
        run: |
          set -euo pipefail
          west build -b native_posix app --pristine always || {
            echo "=== CMake logs (if any) ==="
            find build -name CMakeError.log -print -exec sed -n '1,200p' {} \; || true
            find build -name CMakeOutput.log -print -exec sed -n '1,200p' {} \; || true
            exit 1
          }

      - name: Upload Zephyr build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zephyr-baseline-build
          if-no-files-found: warn
          path: |
            build/zephyr/zephyr*
            build/CMakeCache.txt
            build/CMakeFiles/**
            build/zephyr/.config
            build/zephyr/include/generated/**
            build/zephyr/zephyr.dts
            
  diag-zephyr-boards:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Setup Zephyr
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3
      - name: west update & list boards
        run: |
          set -euo pipefail
          west update
          west boards | tee boards.txt
          echo "---- grep 52840 ----"
          west boards -n 52840 | tee boards_52840.txt || true
      - name: Upload boards listing
        uses: actions/upload-artifact@v4
        with:
          name: zephyr-boards-list
          path: |
            boards.txt
            boards_52840.txt

  # 用 Zephyr 4.1 的新板名格式建置 nRF52840DK（純 printk app）
  zephyr-build-nrf52840dk:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Setup Zephyr
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3
      - name: Build app for nrf52840dk/nrf52840
        run: |
          set -euo pipefail
          west update
          west build app -b nrf52840dk/nrf52840 --pristine always
      - name: Upload ELF & config
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zephyr-nrf52840dk-elf
          if-no-files-found: warn
          path: |
            build/zephyr/zephyr.*
            build/zephyr/.config
            build/zephyr/zephyr.dts
            
  zephyr-build-nrf52-base-app:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Setup Zephyr (SDK + west workspace)
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3

      - name: Build nRF52 baseline app
        run: |
          set -euo pipefail
          west update
          
          rm -rf build
          west build firmware/nrf52_base_app -b nrf52840dk/nrf52840 --pristine always \
            -- -DCONF_FILE="${GITHUB_WORKSPACE}/firmware/nrf52_base_app/prj.conf"
          
          # 若 .config 生成，簡單檢查幾個關鍵位
          if [ -f build/zephyr/.config ]; then
            echo "===== sanity: merged .config keys ====="
            grep -E "CONFIG_(SERIAL|UART_CONSOLE|CONSOLE|PRINTK|LOG)=" build/zephyr/.config || true
          fi
          
          # 存證
          file build/zephyr/zephyr.elf || true
          file build/zephyr/zephyr.hex || true

      - name: Sign and hash artifacts (nRF52840)
        run: |
          set -euo pipefail
          # 1) 生成 .hex（若已生，這步會覆蓋）
          west sign -d build --no-hex --bin --tool imgtool || true
          # 2) 指紋與版本資訊
          python3 - << 'PY'
          import hashlib, pathlib, json, subprocess, os
          root = pathlib.Path("build/zephyr")
          artifacts = {}
          for p in ["zephyr.elf", "zephyr.hex", ".config", "zephyr.dts"]:
              fp = root / p
              if fp.exists():
                  data = fp.read_bytes()
                  artifacts[p] = {
                      "size": len(data),
                      "sha256": hashlib.sha256(data).hexdigest(),
                  }
          # Zephyr/SDK 版本
          def cmd(x): return subprocess.check_output(x, shell=True, text=True).strip()
          meta = {
            "zephyr_describe": cmd("git -C zephyr describe --tags --always || true") if pathlib.Path("zephyr").exists() else "",
            "west_version": cmd("west --version || true"),
          }
          print(json.dumps({"artifacts":artifacts, "meta":meta}, indent=2))
          pathlib.Path("build/zephyr/artifacts_meta.json").write_text(json.dumps({"artifacts":artifacts, "meta":meta}, indent=2))
          PY

      - name: Upload full build evidence (nRF52840)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nrf52-base-evidence
          if-no-files-found: warn
          path: |
            build/zephyr/zephyr.elf
            build/zephyr/zephyr.hex
            build/zephyr/.config
            build/zephyr/zephyr.dts
            build/zephyr/artifacts_meta.json

      - name: Upload nRF52 base app ELF/HEX (canonical artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nrf52-base-elf
          if-no-files-found: error
          path: |
            build/zephyr/zephyr.elf
            build/zephyr/zephyr.hex
            build/zephyr/.config
            build/zephyr/zephyr.dts

  renode-nrf52-load-smoke:
    needs: [zephyr-build-nrf52-base-app]
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
  
      - name: Try download canonical artifact (nrf52-base-elf)
        id: dl
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: nrf52-base-elf
          path: artifacts/nrf52

      - name: Fallback:rebuild ELF if artifact missing
        if: steps.dl.outcome == 'failure'
        run: |
          set -euo pipefail
          echo "Artifact 'nrf52-base-elf' not found, rebuilding locally..."
          west update
          west build firmware/nrf52_base_app -b nrf52840dk/nrf52840 --pristine always
          mkdir -p artifacts/nrf52
          cp -f build/zephyr/zephyr.elf artifacts/nrf52/
          cp -f build/zephyr/zephyr.hex artifacts/nrf52/ || true
          cp -f build/zephyr/.config artifacts/nrf52/ || true
          cp -f build/zephyr/zephyr.dts artifacts/nrf52/ || true

      - name: Show files we will feed to Renode
      # 不論下載或重建，這裡都印出最後實際使用的檔案
        run: |
          set -euo pipefail
          ls -lah artifacts/nrf52
          test -f artifacts/nrf52/zephyr.elf

      - name: Install Renode (portable) & RobotFramework
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends wget xz-utils tar
          # 下載並解壓 portable 版到暫存資料夾
          mkdir -p "$RUNNER_TEMP/renode"
          cd "$RUNNER_TEMP"
          wget -q https://builds.renode.io/renode-latest.linux-portable.tar.gz
          tar -xf renode-latest.linux-portable.tar.gz -C "$RUNNER_TEMP/renode" --strip-components=1
          # 將 renode 加入 PATH，之後可直接呼叫 `renode`
          echo "$RUNNER_TEMP/renode" >> "$GITHUB_PATH"
          # 檢查版本
          "$RUNNER_TEMP/renode/renode" --version || true

          # RobotFramework 供測試編排使用
          python3 -m pip install --user --no-cache-dir robotframework
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Prepare Renode script (inject ELF path)
        run: |
          set -euo pipefail
          sed "s|@{ELF_PATH}|${GITHUB_WORKSPACE}/artifacts/nrf52/zephyr.elf|g" renode/nrf52_load.resc > renode/_nrf52_load.resc
          sed -n '1,120p' renode/_nrf52_load.resc

      - name: Run Renode load smoke
        run: |
          set -euo pipefail
          robot -L TRACE \
            -d artifacts/renode_smoke \
            -v ELF:${GITHUB_WORKSPACE}/artifacts/nrf52/zephyr.elf \
            tests/nrf52_load.robot

      - name: Upload Renode smoke artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: renode-nrf52-load-smoke
          path: |
            artifacts/renode_smoke/**
            renode_run.log
          if-no-files-found: warn
          
  xrce-agent-smoke:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Build & install Micro XRCE-DDS Agent (release deps)
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends git cmake build-essential libasio-dev libtinyxml2-dev
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake .. && make -j"$(nproc)" && sudo make install && sudo ldconfig

      - name: Run UDP agent briefly
        run: |
          set -euo pipefail
          MicroXRCEAgent udp4 -p 8888 -v 6 > agent.log 2>&1 &
          AG=$!
          sleep 1
          ss -lun | grep -q ":8888" || (echo "Agent didn't bind 8888/udp"; cat agent.log; exit 1)
          kill $AG || true
          sleep 0.2
          test -s agent.log || (echo "Agent log empty"; exit 1)

      - name: Upload agent log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xrce-agent-smoke
          path: agent.log
          if-no-files-found: warn

  renode-agent-serial-e2e-smoke:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
  
      - name: Setup Zephyr (SDK + west)
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3
  
      - name: Ensure ELF exists (rebuild if missing)
        run: |
          set -euo pipefail
          if [ ! -f build/zephyr/zephyr.elf ]; then
            west update
            west build firmware/nrf52_base_app -b nrf52840dk/nrf52840 --pristine always
          fi
          file build/zephyr/zephyr.elf
  
      - name: Install Renode (portable) + deps
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends curl jq ca-certificates mono-complete tar
  
          RENODE_DIR="${RUNNER_TEMP}/renode"
          mkdir -p "$RENODE_DIR"
  
          # 取最新 release 的 linux-portable tarball
          URL="$(curl -s https://api.github.com/repos/renode/renode/releases/latest \
            | jq -r '.assets[] | select(.name|test("linux-portable.*\\.tar\\.gz$")) | .browser_download_url' | head -n1)"
          echo "Downloading: $URL"
          curl -L "$URL" -o "${RENODE_DIR}/renode.tar.gz"
  
          # 解壓
          tar -xzf "${RENODE_DIR}/renode.tar.gz" -C "$RENODE_DIR"
  
          # 動態尋找 renode 可執行檔（不同版本目錄結構不一樣）
          RENODE_BIN="$(find "$RENODE_DIR" -type f -name renode -perm -u+x | head -n1 || true)"
          if [ -z "$RENODE_BIN" ]; then
            # 有些包 renode 腳本沒有 +x，或名稱帶副檔名；都處理一下
            RENODE_BIN="$(find "$RENODE_DIR" -type f -name 'renode' -o -name 'renode.sh' | head -n1 || true)"
          fi
          if [ -z "$RENODE_BIN" ]; then
            echo "::error::Cannot locate renode executable after extracting portable package."
            echo "Extracted files:"
            find "$RENODE_DIR" -maxdepth 2 -type f | sed -n '1,50p'
            exit 1
          fi
          chmod +x "$RENODE_BIN"
          echo "Found renode at: $RENODE_BIN"
  
          # 加到 PATH
          echo "$(dirname "$RENODE_BIN")" >> "$GITHUB_PATH"
  
          # 簡單確認
          "$(dirname "$RENODE_BIN")/renode" --version || true

  
      - name: Install XRCE Agent + Robot deps
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends git cmake build-essential libasio-dev libtinyxml2-dev socat
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake .. && make -j"$(nproc)" && sudo make install && sudo ldconfig
          python3 -m pip install --user --no-cache-dir robotframework
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
  
      - name: Run unified Renode+Agent serial smoke
        run: |
          set -euo pipefail
          robot -L TRACE -d artifacts/renode_agent_serial tests/renode_xrce_serial_e2e.robot
  
      - name: Upload E2E artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: renode-agent-serial-e2e
          path: |
            artifacts/renode_agent_serial/**
            renode_e2e.log
            agent_e2e.log
          if-no-files-found: warn

  zephyr-build-and-run-xrce-stub:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
  
      - name: Setup Zephyr (SDK + west)
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3
  
      - name: Build XRCE stub app (nRF52840)
        run: |
          set -euo pipefail
          west update
          west build firmware/xrce_nrf52_client -b nrf52840dk/nrf52840 --pristine always
          file build/zephyr/zephyr.elf
          file build/zephyr/zephyr.hex
  
      - name: Install Renode (portable) + Robot
        run: |
          set -euo pipefail
          sudo apt-get update
          # Renode 需要 mono runtime；用系統套件即可
          sudo apt-get install -y --no-install-recommends mono-complete ca-certificates curl xz-utils
          # 下載可攜版 Renode 並加入 PATH
          mkdir -p $HOME/tools/renode
          curl -L https://builds.renode.io/renode-latest.linux-portable.tar.gz \
            | tar xz --strip-components=1 -C $HOME/tools/renode
          echo "$HOME/tools/renode" >> "$GITHUB_PATH"
          # RobotFramework
          python3 -m pip install --user --no-cache-dir robotframework
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

  
      - name: Run Renode smoke (XRCE stub)
        run: |
          set -euo pipefail
          # 復用你已存在的 tests/renode_nrf52_load.robot 風格；若名稱不同，用你現在綠燈那支
          robot -L TRACE -d artifacts/xrce_stub_run tests/nrf52_load.robot
  
      - name: Upload artifacts (ELF/HEX/.config/DTS + logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xrce-stub-elf-and-run
          path: |
            build/zephyr/zephyr.*
            build/zephyr/.config
            build/zephyr/zephyr.dts
            artifacts/xrce_stub_run/**
          if-no-files-found: warn
          
  renode-uart-heartbeat-capture:
    # 這個測試需要 xrce_nrf52_client 韌體，因为它會印出 "XRCE-STUB heartbeat"
    # 我們讓它依賴 zephyr-build-and-run-xrce-stub job
    needs: [zephyr-build-and-run-xrce-stub]
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
      
      # 為了讓此 job 能獨立測試，我們也加入 west setup
      - name: Setup Zephyr (SDK + west)
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3

      - name: Download XRCE stub app ELF
        uses: actions/download-artifact@v4
        with:
          # 從 xrce-stub-elf-and-run job 下載產物
          name: xrce-stub-elf-and-run
          path: artifacts/downloaded-stub
          
      - name: Install deps, setup PATH, and run test in one step
        run: |
          set -euo pipefail
          # --- 1. Install Dependencies ---
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends wget xz-utils tar
          python3 -m pip install --user --no-cache-dir robotframework robotframework-sshlibrary
          # --- 2. Setup PATH for this step ---

          # Install Renode portable
          RENODE_DIR="$RUNNER_TEMP/renode"
          mkdir -p "$RENODE_DIR"
          wget -q https://builds.renode.io/renode-latest.linux-portable.tar.gz -O "$RENODE_DIR/renode.tar.gz"
          tar -xf "$RENODE_DIR/renode.tar.gz" -C "$RENODE_DIR" --strip-components=1
          
          # Add Renode and pip user bin to PATH for the rest of this script
          export PATH="$RENODE_DIR:$HOME/.local/bin:$PATH"
          renode --version

          # --- 3. Run the test ---
          robot -d artifacts/uart_capture tests/nrf52_uart_capture.robot

      - name: Upload UART capture artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: renode-uart-capture-logs
          path: |
            artifacts/uart_capture/**
            uart_capture.renode.log
            uart_capture.device.log
          if-no-files-found: warn
