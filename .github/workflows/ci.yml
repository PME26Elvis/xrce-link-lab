name: CI

on:
  push:
    branches: [ "main" ] # 僅在 main 分支 push 時觸發，避免與 ci.yml 衝突
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ====================================================================
  #  Build & Test Jobs (with caching)
  # ====================================================================

  agent-build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Cache apt packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('**/ci_2.yml') }} # 當此檔變更時，快取失效
          restore-keys: |
            ${{ runner.os }}-apt-
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev
      - name: Build Micro XRCE-DDS Agent
        run: |
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig
      - name: Sanity check Agent CLI
        run: MicroXRCEAgent --help | head -n 30

  zephyr-build-nrf52-base-app:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Cache Zephyr SDK
        id: cache-zephyr-sdk
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/zephyr-sdk-0.16.3
          key: zephyr-sdk-0.16.3-${{ runner.os }}

      - name: Setup Zephyr (SDK + west workspace)
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3
          # 如果快取命中，從快取路徑安裝 SDK
          sdk-install-path: ${{ steps.cache-zephyr-sdk.outputs.cache-hit == 'true' && format('{0}/zephyr-sdk-0.16.3', runner.temp) || '' }}

      - name: Cache west modules
        uses: actions/cache@v4
        with:
          path: |
            bootloader
            modules
            tools
            zephyr
          key: ${{ runner.os }}-west-${{ hashFiles('app/west.yml') }}

      - name: Build nRF52 baseline app
        run: |
          set -euo pipefail
          west update
          rm -rf build
          west build firmware/nrf52_base_app -b nrf52840dk/nrf52840 --pristine always \
            -- -DCONF_FILE="${GITHUB_WORKSPACE}/firmware/nrf52_base_app/prj.conf"
      - name: Upload nRF52 base app ELF/HEX (canonical artifact)
        uses: actions/upload-artifact@v4
        with:
          name: nrf52-base-elf-v2
          if-no-files-found: error
          path: |
            build/zephyr/zephyr.elf
            build/zephyr/zephyr.hex
            build/zephyr/.config
            build/zephyr/zephyr.dts
            
  zephyr-build-and-run-xrce-stub:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Cache Zephyr SDK
        id: cache-zephyr-sdk
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/zephyr-sdk-0.16.3
          key: zephyr-sdk-0.16.3-${{ runner.os }}

      - name: Setup Zephyr (SDK + west)
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3
          sdk-install-path: ${{ steps.cache-zephyr-sdk.outputs.cache-hit == 'true' && format('{0}/zephyr-sdk-0.16.3', runner.temp) || '' }}

      - name: Cache west modules
        uses: actions/cache@v4
        with:
          path: |
            bootloader
            modules
            tools
            zephyr
          key: ${{ runner.os }}-west-${{ hashFiles('app/west.yml') }}

      - name: Build XRCE stub app (nRF52840)
        run: |
          set -euo pipefail
          west update
          west build firmware/xrce_nrf52_client -b nrf52840dk/nrf52840 --pristine always
      - name: Upload artifacts (ELF/HEX/.config/DTS)
        uses: actions/upload-artifact@v4
        with:
          name: xrce-stub-elf-v2
          path: |
            build/zephyr/zephyr.elf
            build/zephyr/zephyr.hex
            build/zephyr/.config
            build/zephyr/zephyr.dts
          if-no-files-found: warn



  # 保持一個 E2E smoke test 作為範例
  renode-agent-serial-e2e-smoke:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Cache Zephyr SDK
        id: cache-zephyr-sdk
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/zephyr-sdk-0.16.3
          key: zephyr-sdk-0.16.3-${{ runner.os }}

      - name: Setup Zephyr (SDK + west)
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3
          sdk-install-path: ${{ steps.cache-zephyr-sdk.outputs.cache-hit == 'true' && format('{0}/zephyr-sdk-0.16.3', runner.temp) || '' }}

      - name: Cache west modules
        uses: actions/cache@v4
        with:
          path: |
            bootloader
            modules
            tools
            zephyr
          key: ${{ runner.os }}-west-${{ hashFiles('app/west.yml') }}

      - name: Ensure ELF exists (rebuild if missing)
        run: |
          set -euo pipefail
          if [ ! -f build/zephyr/zephyr.elf ]; then
            west update
            west build firmware/nrf52_base_app -b nrf52840dk/nrf52840 --pristine always
          fi
          file build/zephyr/zephyr.elf
      - name: Cache Renode portable
        id: cache-renode
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/renode-portable
          key: renode-portable-v1-${{ runner.os }}

      - name: Install Renode (from cache or download)
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends curl jq ca-certificates mono-complete tar
          RENODE_DIR="${RUNNER_TEMP}/renode-portable"
          mkdir -p "$RENODE_DIR"
          if [ "${{ steps.cache-renode.outputs.cache-hit }}" != 'true' ]; then
            echo "Renode cache miss. Downloading..."
            URL="$(curl -s https://api.github.com/repos/renode/renode/releases/latest | jq -r '.assets[] | select(.name|test("linux-portable.*\\.tar\\.gz$")) | .browser_download_url' | head -n1)"
            curl -L "$URL" -o "${RENODE_DIR}/renode.tar.gz"
            tar -xzf "${RENODE_DIR}/renode.tar.gz" -C "$RENODE_DIR" --strip-components=1
          else
            echo "Renode cache hit."
          fi
          RENODE_BIN="$(find "$RENODE_DIR" -type f -name renode -perm -u+x | head -n1 || true)"
          if [ -z "$RENODE_BIN" ]; then RENODE_BIN="$(find "$RENODE_DIR" -type f -name 'renode' -o -name 'renode.sh' | head -n1 || true)"; fi
          if [ -z "$RENODE_BIN" ]; then echo "::error::Cannot locate renode executable"; exit 1; fi
          chmod +x "$RENODE_BIN"
          echo "$(dirname "$RENODE_BIN")" >> "$GITHUB_PATH"
          "$(dirname "$RENODE_BIN")/renode" --version || true
      - name: Install XRCE Agent + Robot deps
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends git cmake build-essential libasio-dev libtinyxml2-dev socat
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake .. && make -j"$(nproc)" && sudo make install && sudo ldconfig
          python3 -m pip install --user --no-cache-dir robotframework
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
      - name: Run unified Renode+Agent serial smoke
        run: |
          set -euo pipefail
          robot -L TRACE -d artifacts/renode_agent_serial tests/renode_xrce_serial_e2e.robot
      - name: Upload E2E artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: renode-agent-serial-e2e-v2
          path: |
            artifacts/renode_agent_serial/**
            renode_e2e.log
            agent_e2e.log
          if-no-files-found: warn


################################################################################
#  The following jobs are copied from ci.yml for completeness.
#  You can apply caching strategies to them as well.
################################################################################

  renode-smoke:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Run Renode smoke test
        uses: antmicro/renode-test-action@v4
        with:
          renode-revision: master
          tests-to-run: tests/smoke.robot

  renode-multinode:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Run Renode Quark 2-node demo
        uses: antmicro/renode-test-action@v4
        with:
          renode-revision: master
          tests-to-run: tests/multinode.robot
  renode-two-nodes:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Run Renode NRF two-node (Robot)
        uses: antmicro/renode-test-action@v4
        with:
          renode-revision: master
          tests-to-run: tests/two_nodes.robot
          artifacts-path: artifacts/two_nodes

      - name: Upload Robot reports (two-nodes)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: renode-two-nodes-reports
          path: artifacts/two_nodes/**
  agent-udp-smoke:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev iproute2
      - name: Build Micro XRCE-DDS Agent
        run: |
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig
      - name: Launch Agent (udp4:8888) briefly and verify port
        run: |
          set -euo pipefail
          # 短暫啟動 Agent（最多 5 秒），讓它綁定 8888/UDP
          timeout 5s MicroXRCEAgent udp4 -p 8888 &
          AGG_PID=$!
          # 等半秒讓 Agent 起來
          sleep 0.5
          # 檢查 8888/udp 是否被綁定
          ss -lun | grep -q ':8888' && echo "UDP 8888 is bound by Agent."
          # 等待背景 timeout 自動收掉 Agent（最多 5 秒）
          wait $AGG_PID || true
  agent-tcp-connect:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev iproute2 python3
      - name: Build Micro XRCE-DDS Agent
        run: |
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig
      - name: Launch Agent (tcp4:8888) and connect with Python socket
        run: |
          set -euo pipefail
          # 背景啟動 Agent（最多 8 秒，由 timeout 收掉）
          timeout 8s MicroXRCEAgent tcp4 -p 8888 &
          AG_PID=$!
          # 等 Agent 起來
          sleep 0.5
          # 用 Python 標準庫建立 TCP 連線到 127.0.0.1:8888，維持 ~1s 後關閉
          python3 - <<'PY'
          import socket, time
          s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
          s.settimeout(5.0)
          s.connect(("127.0.0.1", 8888))
          time.sleep(1.0)   # 保持連線片刻
          s.close()
          PY
          # 確認有 ESTAB 連線曾建立（允許很快關閉，因此用 || true 避免時間窗口誤判）
          ss -ptn | grep -E ':8888\s' || true
          # 等待 Agent 結束（timeout 會 kill）
          wait $AG_PID || true
  xrce-helloworld:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev iproute2
      - name: Build & install Micro XRCE-DDS Agent (per docs)
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig
      - name: Build Micro XRCE-DDS Client examples (per docs)
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Client.git
          cd Micro-XRCE-DDS-Client && mkdir build && cd build
          cmake .. -DUCLIENT_BUILD_EXAMPLES=ON
          make -j"$(nproc)"
          test -x examples/PublishHelloWorld/PublishHelloWorldClient
          test -x examples/SubscribeHelloWorld/SubscribeHelloWorldClient
      - name: Run XRCE HelloWorld end-to-end (Agent + Pub + Sub, same step)
        run: |
          set -euo pipefail
          # 啟動 Agent（UDP 2019，官方 quickstart）
          MicroXRCEAgent udp4 -p 2019 --verbose 4 > agent.log 2>&1 &
          AG_PID=$!
          sleep 0.8
          ss -lun | grep -q ':2019' || (echo "Agent UDP 2019 not bound"; cat agent.log; exit 1)
          # 先跑 Publisher（官方建議先 Publisher），背景跑幾秒讓 Subscriber 有資料可收
          timeout 6s Micro-XRCE-DDS-Client/build/examples/PublishHelloWorld/PublishHelloWorldClient 127.0.0.1 2019 > pub.out 2>&1 &
          PUB_PID=$!
          sleep 0.5
          # 再跑 Subscriber（等待不超過 8 秒）
          timeout 8s Micro-XRCE-DDS-Client/build/examples/SubscribeHelloWorld/SubscribeHelloWorldClient 127.0.0.1 2019 > sub.out 2>&1 || true
          # 確保 publisher 結束、清理 agent
          wait $PUB_PID || true
          kill $AG_PID 2>/dev/null || true
          sleep 0.2
      - name: Collect metrics (baseline)
        run: |
          set -euo pipefail
          mkdir -p artifacts/xrce-helloworld
          python3 tools/metrics/collect_helloworld.py \
            --agent-log agent.log \
            --pub-out pub.out \
            --sub-out sub.out \
            --label baseline \
            --out artifacts/xrce-helloworld/metrics.json
      - name: Upload XRCE HelloWorld artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xrce-helloworld-logs
          path: |
            agent.log
            pub.out
            sub.out
  agent-serial-pty:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev
      - name: Build & install Micro XRCE-DDS Agent
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig
      - name: Run Renode serial PTY bridge test (Robot)
        uses: antmicro/renode-test-action@v4
        with:
          renode-revision: master
          tests-to-run: tests/serial_pty.robot
          artifacts-path: artifacts/serial_pty

      - name: Upload serial-pty artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: serial-pty-logs
          path: artifacts/serial_pty/**
  xrce-helloworld-netem-100ms-1loss:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev iproute2
          chmod +x tools/netem_profiles.sh
      - name: Build & install Micro XRCE-DDS Agent
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig
      - name: Build Micro XRCE-DDS Client examples
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Client.git
          cd Micro-XRCE-DDS-Client && mkdir build && cd build
          cmake .. -DUCLIENT_BUILD_EXAMPLES=ON
          make -j"$(nproc)"
      - name: Apply netem (100ms + 1% loss) and run XRCE HelloWorld end-to-end
        run: |
          set -euo pipefail
          # 1) apply netem
          echo "Applying netem profile delay100ms_loss1 on lo..."
          sudo ./tools/netem_profiles.sh apply delay100ms_loss1
          # 記錄目前 qdisc 設定
          tc qdisc show dev lo | tee netem.txt
          # 2) run Agent + Pub/Sub in the same shell
          MicroXRCEAgent udp4 -p 2019 --verbose 4 > agent.log 2>&1 &
          AG_PID=$!
          sleep 0.8
          ss -lun | grep -q ':2019' || (echo "Agent UDP 2019 not bound"; cat agent.log; exit 1)
          timeout 8s Micro-XRCE-DDS-Client/build/examples/PublishHelloWorld/PublishHelloWorldClient 127.0.0.1 2019 > pub.out 2>&1 &
          PUB_PID=$!
          sleep 0.5
          timeout 10s Micro-XRCE-DDS-Client/build/examples/SubscribeHelloWorld/SubscribeHelloWorldClient 127.0.0.1 2019 > sub.out 2>&1 || true
          wait $PUB_PID || true
          kill $AG_PID 2>/dev/null || true
          sleep 0.2
      - name: Collect metrics (netem delay100ms_loss1)
        run: |
          set -euo pipefail
          mkdir -p artifacts/xrce-helloworld-netem
          python3 tools/metrics/collect_helloworld.py \
            --agent-log agent.log \
            --pub-out pub.out \
            --sub-out sub.out \
            --netem netem.txt \
            --label delay100ms_loss1 \
            --out artifacts/xrce-helloworld-netem/metrics.json
      - name: Clear netem and collect artifacts
        if: always()
        run: |
          sudo ./tools/netem_profiles.sh clear
          mkdir -p artifacts/xrce-helloworld-netem
          mv agent.log pub.out sub.out netem.txt artifacts/xrce-helloworld-netem/ || true
      - name: Upload XRCE HelloWorld (netem) artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xrce-helloworld-netem-logs
          path: artifacts/xrce-helloworld-netem/**
  zephyr-build-baseline:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Zephyr (SDK + west workspace)
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3

      - name: Show west env and boards (for diagnosis)
        run: |
          set -euo pipefail
          west --version
          west topdir
          west list
          echo "---- west boards (first 200) ----"
          west boards | head -n 200 || true
          echo "---- search 52840 ----"
          west boards -n 52840 || true
      - name: Build Zephyr app for native_posix (baseline)
        run: |
          set -euo pipefail
          west build -b native_posix app --pristine always || {
            echo "=== CMake logs (if any) ==="
            find build -name CMakeError.log -print -exec sed -n '1,200p' {} \; || true
            find build -name CMakeOutput.log -print -exec sed -n '1,200p' {} \; || true
            exit 1
          }
      - name: Upload Zephyr build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zephyr-baseline-build
          if-no-files-found: warn
          path: |
            build/zephyr/zephyr*
            build/CMakeCache.txt
            build/CMakeFiles/**
            build/zephyr/.config
            build/zephyr/include/generated/**
            build/zephyr/zephyr.dts
            
  diag-zephyr-boards:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Setup Zephyr
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3
      - name: west update & list boards
        run: |
          set -euo pipefail
          west update
          west boards | tee boards.txt
          echo "---- grep 52840 ----"
          west boards -n 52840 | tee boards_52840.txt || true
      - name: Upload boards listing
        uses: actions/upload-artifact@v4
        with:
          name: zephyr-boards-list
          path: |
            boards.txt
            boards_52840.txt
  # 用 Zephyr 4.1 的新板名格式建置 nRF52840DK（純 printk app）
  zephyr-build-nrf52840dk:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Setup Zephyr
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3
      - name: Build app for nrf52840dk/nrf52840
        run: |
          set -euo pipefail
          west update
          west build app -b nrf52840dk/nrf52840 --pristine always
      - name: Upload ELF & config
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zephyr-nrf52840dk-elf
          if-no-files-found: warn
          path: |
            build/zephyr/zephyr.*
            build/zephyr/.config
            build/zephyr/zephyr.dts
  renode-nrf52-load-smoke:
    needs: [zephyr-build-nrf52-base-app] # 依賴 nrf52_base_app 的建置
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Try download canonical artifact (nrf52-base-elf)
        id: dl
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: nrf52-base-elf-v2 # 使用 v2 artifact
          path: artifacts/nrf52

      # --- Fallback Steps: only run if artifact download fails ---

      - name: Setup Zephyr for fallback build
        if: steps.dl.outcome == 'failure'
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3

      - name: Run fallback build
        if: steps.dl.outcome == 'failure'
        run: |
          set -euo pipefail
          echo "Artifact 'nrf52-base-elf-v2' not found, rebuilding locally..."
          west update
          west build firmware/nrf52_base_app -b nrf52840dk/nrf52840 --pristine always
          mkdir -p artifacts/nrf52
          cp -f build/zephyr/zephyr.elf artifacts/nrf52/
      - name: Show files we will feed to Renode
      # 不論下載或重建，這裡都印出最後實際使用的檔案
        run: |
          set -euo pipefail
          ls -lah artifacts/nrf52
          test -f artifacts/nrf52/zephyr.elf
      - name: Cache Renode portable
        id: cache-renode
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/renode-portable
          key: renode-portable-v1-${{ runner.os }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-robot

      - name: Install deps, setup PATH, and run test
        run: |
          set -euo pipefail
          # --- 1. Install Dependencies ---
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends wget xz-utils tar
          python3 -m pip install --user --no-cache-dir robotframework robotframework-sshlibrary
          # --- 2. Setup PATH for this step ---
          RENODE_DIR="$RUNNER_TEMP/renode-portable"
          mkdir -p "$RENODE_DIR"
          if [ "${{ steps.cache-renode.outputs.cache-hit }}" != 'true' ]; then
            echo "Renode cache miss. Downloading..."
            wget -q https://builds.renode.io/renode-latest.linux-portable.tar.gz -O "$RENODE_DIR/renode.tar.gz"
            tar -xf "$RENODE_DIR/renode.tar.gz" -C "$RENODE_DIR" --strip-components=1
          else
            echo "Renode cache hit."
          fi
          export PATH="$RENODE_DIR:$HOME/.local/bin:$PATH"
          renode --version
          # --- 3. Run the test ---
          robot -L TRACE \
            -d artifacts/renode_smoke \
            -v ELF:${GITHUB_WORKSPACE}/artifacts/nrf52/zephyr.elf \
            tests/nrf52_load.robot
      - name: Upload Renode smoke artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: renode-nrf52-load-smoke
          path: |
            artifacts/renode_smoke/**
            renode_run.log
          if-no-files-found: warn
          
  xrce-agent-smoke:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Build & install Micro XRCE-DDS Agent (release deps)
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends git cmake build-essential libasio-dev libtinyxml2-dev
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake .. && make -j"$(nproc)" && sudo make install && sudo ldconfig
      - name: Run UDP agent briefly
        run: |
          set -euo pipefail
          MicroXRCEAgent udp4 -p 8888 -v 6 > agent.log 2>&1 &
          AG=$!
          sleep 1
          ss -lun | grep -q ":8888" || (echo "Agent didn't bind 8888/udp"; cat agent.log; exit 1)
          kill $AG || true
          sleep 0.2
          test -s agent.log || (echo "Agent log empty"; exit 1)
      - name: Upload agent log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xrce-agent-smoke
          path: agent.log
          if-no-files-found: warn
  zephyr-build-uxrapp:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Setup Zephyr (SDK + west)
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3
      - name: Build xrce_nrf52_uxrapp (nRF52840)
        run: |
          set -euo pipefail
          west update
          west build firmware/xrce_nrf52_uxrapp -b nrf52840dk/nrf52840 --pristine always
          file build/zephyr/zephyr.elf
      - name: Upload ELF
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: uxrapp-elf
          path: build/zephyr/zephyr.elf
          if-no-files-found: warn

  renode-agent-serial-e2e:
    runs-on: ubuntu-22.04
    defaults: { run: { shell: bash } }
    steps:
      - uses: actions/checkout@v4
  
      - name: Setup Zephyr (SDK + west)
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3
  
      - name: Build nRF52 demo ELF
        run: |
          set -euo pipefail
          west update
          west build firmware/xrce_nrf52_client -b nrf52840dk/nrf52840 --pristine always
          ls -l build/zephyr/zephyr.elf build/zephyr/zephyr.hex
  
      - name: Install Renode(portable), Agent, socat
        env:
          RENODE_BIN_DIR: tools/renode-portable
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends git cmake build-essential \
            libasio-dev libtinyxml2-dev socat wget xz-utils tar
          # Build Agent（僅在工作目錄使用）
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cmake -S Micro-XRCE-DDS-Agent -B Micro-XRCE-DDS-Agent/build -Wno-dev
          cmake --build Micro-XRCE-DDS-Agent/build -j"$(nproc)"
  
          # ⚠️ 把 Renode 解到「不同資料夾」，避免覆蓋 repo 的 renode/ 腳本資料夾
          rm -rf "${RENODE_BIN_DIR}"
          mkdir -p "${RENODE_BIN_DIR}"
          wget -q https://builds.renode.io/renode-latest.linux-portable.tar.gz -O renode.tar.gz
          tar -xf renode.tar.gz -C "${RENODE_BIN_DIR}" --strip-components=1
          echo "== Renode bin tree =="
          find "${RENODE_BIN_DIR}" -maxdepth 2 -type f | sort | sed -n '1,120p'
          "${RENODE_BIN_DIR}/renode" --version
  
      - name: Show script dir (repo renode/)
        run: |
          set -euo pipefail
          echo "== repo ./renode dir =="
          ls -la renode | sed -n '1,120p'
  
      - name: Prepare Renode script
        run: |
          set -euo pipefail
          # 直接複製腳本成 _run.resc（現在不需要替換任何變數）
          cp renode/versatile_agent_serial.resc renode/_run.resc
          echo "== _run.resc ==" && sed -n '1,80p' renode/_run.resc

      - name: Run Renode <-> Agent E2E (serial over PTY)
        env:
          RENODE_BIN_DIR: tools/renode-portable
        run: |
          set -euo pipefail
          mkdir -p artifacts
          : > artifacts/renode.log
          : > artifacts/agent.log
          : > artifacts/uart.log
      
          echo "== Start Renode (headless) =="
          "${RENODE_BIN_DIR}/renode" --disable-xwt -e "i @renode/_run.resc" > artifacts/renode.log 2>&1 &
          RPID=$!
          sleep 1
      
          echo "== Parse PTY from renode.log =="
          PTY=""
          for i in {1..20}; do
            set +o pipefail
            PTY=$( (grep -oE 'UART PTY: .*' artifacts/renode.log || true) | tail -n1 | awk '{print $3}')
            set -o pipefail
            [ -n "${PTY}" ] && break
            sleep 0.2
          done
          echo "PTY=${PTY:-<none>}"
          if [ -z "${PTY}" ]; then
            echo "::error:: PTY not found"; sed -n '1,200p' artifacts/renode.log || true
            kill $RPID 2>/dev/null || true
            exit 2
          fi
      
          echo "== Bridge PTY to /tmp/xrce_tty =="
          sudo socat -d -d PTY,raw,echo=0,link=/tmp/xrce_tty PTY,raw,echo=0,link=/tmp/xrce_peer >/dev/null 2>&1 &
          SC=$!
          sleep 0.5
          sudo socat -d -d file:"$PTY",raw,echo=0 file:/tmp/xrce_peer,raw,echo=0 >/dev/null 2>&1 &
          BR=$!
          sleep 0.5
      
          echo "== Start XRCE Agent =="
          ./Micro-XRCE-DDS-Agent/build/bin/MicroXRCEAgent serial -d /tmp/xrce_tty -b 115200 -v 4 > artifacts/agent.log 2>&1 &
          AP=$!
          sleep 0.5
      
          echo "== Inject test line into peer (simulates MCU TX) =="
          echo "XRCE-STUB heartbeat" > /tmp/xrce_peer
          sleep 0.2
      
          echo "== Tap UART for 3s =="
          timeout 3s cat /tmp/xrce_tty > artifacts/uart.log || true
      
          echo "== tails =="
          tail -n 80 artifacts/renode.log || true
          tail -n 80 artifacts/agent.log || true
          tail -n 80 artifacts/uart.log || true
      
          if [ ! -s artifacts/uart.log ]; then
            echo "::error:: uart.log empty"
            kill $AP $BR $SC $RPID 2>/dev/null || true
            exit 3
          fi
          grep -q "XRCE-STUB heartbeat" artifacts/uart.log || \
            (echo "::warning:: heartbeat not found in uart.log" && exit 4)
      
          kill $AP $BR $SC $RPID 2>/dev/null || true
          sleep 0.2

      - name: Upload E2E artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: renode-agent-serial-e2e
          if-no-files-found: warn
          path: |
            build/zephyr/zephyr.elf
            build/zephyr/zephyr.hex
            artifacts/renode.log
            artifacts/agent.log
            artifacts/uart.log
