name: CI

on:
  push:
  pull_request:

jobs:
  renode-smoke:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Run Renode smoke test
        uses: antmicro/renode-test-action@v4
        with:
          renode-revision: master
          tests-to-run: tests/smoke.robot

  agent-build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev
      - name: Build Micro XRCE-DDS Agent
        run: |
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig
      - name: Sanity check Agent CLI
        run: MicroXRCEAgent --help | head -n 30

  renode-multinode:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Run Renode Quark 2-node demo
        uses: antmicro/renode-test-action@v4
        with:
          renode-revision: master
          tests-to-run: tests/multinode.robot
  renode-two-nodes:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Run Renode NRF two-node (Robot)
        uses: antmicro/renode-test-action@v4
        with:
          renode-revision: master
          tests-to-run: tests/two_nodes.robot
          artifacts-path: artifacts/two_nodes

      - name: Upload Robot reports (two-nodes)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: renode-two-nodes-reports
          path: artifacts/two_nodes/**
  agent-udp-smoke:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev iproute2

      - name: Build Micro XRCE-DDS Agent
        run: |
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig

      - name: Launch Agent (udp4:8888) briefly and verify port
        run: |
          set -euo pipefail
          # 短暫啟動 Agent（最多 5 秒），讓它綁定 8888/UDP
          timeout 5s MicroXRCEAgent udp4 -p 8888 &
          AGG_PID=$!
          # 等半秒讓 Agent 起來
          sleep 0.5
          # 檢查 8888/udp 是否被綁定
          ss -lun | grep -q ':8888' && echo "UDP 8888 is bound by Agent."
          # 等待背景 timeout 自動收掉 Agent（最多 5 秒）
          wait $AGG_PID || true
  agent-tcp-connect:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev iproute2 python3

      - name: Build Micro XRCE-DDS Agent
        run: |
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig

      - name: Launch Agent (tcp4:8888) and connect with Python socket
        run: |
          set -euo pipefail
          # 背景啟動 Agent（最多 8 秒，由 timeout 收掉）
          timeout 8s MicroXRCEAgent tcp4 -p 8888 &
          AG_PID=$!
          # 等 Agent 起來
          sleep 0.5
          # 用 Python 標準庫建立 TCP 連線到 127.0.0.1:8888，維持 ~1s 後關閉
          python3 - <<'PY'
          import socket, time
          s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
          s.settimeout(5.0)
          s.connect(("127.0.0.1", 8888))
          time.sleep(1.0)   # 保持連線片刻
          s.close()
          PY
          # 確認有 ESTAB 連線曾建立（允許很快關閉，因此用 || true 避免時間窗口誤判）
          ss -ptn | grep -E ':8888\s' || true
          # 等待 Agent 結束（timeout 會 kill）
          wait $AG_PID || true
  xrce-helloworld:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev iproute2

      - name: Build & install Micro XRCE-DDS Agent (per docs)
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig

      - name: Build Micro XRCE-DDS Client examples (per docs)
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Client.git
          cd Micro-XRCE-DDS-Client && mkdir build && cd build
          cmake .. -DUCLIENT_BUILD_EXAMPLES=ON
          make -j"$(nproc)"
          test -x examples/PublishHelloWorld/PublishHelloWorldClient
          test -x examples/SubscribeHelloWorld/SubscribeHelloWorldClient

      - name: Run XRCE HelloWorld end-to-end (Agent + Pub + Sub, same step)
        run: |
          set -euo pipefail
          # 啟動 Agent（UDP 2019，官方 quickstart）
          MicroXRCEAgent udp4 -p 2019 --verbose 4 > agent.log 2>&1 &
          AG_PID=$!
          sleep 0.8
          ss -lun | grep -q ':2019' || (echo "Agent UDP 2019 not bound"; cat agent.log; exit 1)

          # 先跑 Publisher（官方建議先 Publisher），背景跑幾秒讓 Subscriber 有資料可收
          timeout 6s Micro-XRCE-DDS-Client/build/examples/PublishHelloWorld/PublishHelloWorldClient 127.0.0.1 2019 > pub.out 2>&1 &
          PUB_PID=$!
          sleep 0.5

          # 再跑 Subscriber（等待不超過 8 秒）
          timeout 8s Micro-XRCE-DDS-Client/build/examples/SubscribeHelloWorld/SubscribeHelloWorldClient 127.0.0.1 2019 > sub.out 2>&1 || true

          # 確保 publisher 結束、清理 agent
          wait $PUB_PID || true
          kill $AG_PID 2>/dev/null || true
          sleep 0.2
      - name: Collect metrics (baseline)
        run: |
          set -euo pipefail
          mkdir -p artifacts/xrce-helloworld
          python3 tools/metrics/collect_helloworld.py \
            --agent-log agent.log \
            --pub-out pub.out \
            --sub-out sub.out \
            --label baseline \
            --out artifacts/xrce-helloworld/metrics.json

      - name: Upload XRCE HelloWorld artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xrce-helloworld-logs
          path: |
            agent.log
            pub.out
            sub.out
  agent-serial-pty:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev

      - name: Build & install Micro XRCE-DDS Agent
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig

      - name: Run Renode serial PTY bridge test (Robot)
        uses: antmicro/renode-test-action@v4
        with:
          renode-revision: master
          tests-to-run: tests/serial_pty.robot
          artifacts-path: artifacts/serial_pty

      - name: Upload serial-pty artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: serial-pty-logs
          path: artifacts/serial_pty/**
  xrce-helloworld-netem-100ms-1loss:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake build-essential libasio-dev libtinyxml2-dev iproute2
          chmod +x tools/netem_profiles.sh

      - name: Build & install Micro XRCE-DDS Agent
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig

      - name: Build Micro XRCE-DDS Client examples
        run: |
          set -euo pipefail
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Client.git
          cd Micro-XRCE-DDS-Client && mkdir build && cd build
          cmake .. -DUCLIENT_BUILD_EXAMPLES=ON
          make -j"$(nproc)"

      - name: Apply netem (100ms + 1% loss) and run XRCE HelloWorld end-to-end
        run: |
          set -euo pipefail
          # 1) apply netem
          echo "Applying netem profile delay100ms_loss1 on lo..."
          sudo ./tools/netem_profiles.sh apply delay100ms_loss1
          # 記錄目前 qdisc 設定
          tc qdisc show dev lo | tee netem.txt

          # 2) run Agent + Pub/Sub in the same shell
          MicroXRCEAgent udp4 -p 2019 --verbose 4 > agent.log 2>&1 &
          AG_PID=$!
          sleep 0.8
          ss -lun | grep -q ':2019' || (echo "Agent UDP 2019 not bound"; cat agent.log; exit 1)

          timeout 8s Micro-XRCE-DDS-Client/build/examples/PublishHelloWorld/PublishHelloWorldClient 127.0.0.1 2019 > pub.out 2>&1 &
          PUB_PID=$!
          sleep 0.5
          timeout 10s Micro-XRCE-DDS-Client/build/examples/SubscribeHelloWorld/SubscribeHelloWorldClient 127.0.0.1 2019 > sub.out 2>&1 || true

          wait $PUB_PID || true
          kill $AG_PID 2>/dev/null || true
          sleep 0.2
      - name: Collect metrics (netem delay100ms_loss1)
        run: |
          set -euo pipefail
          mkdir -p artifacts/xrce-helloworld-netem
          python3 tools/metrics/collect_helloworld.py \
            --agent-log agent.log \
            --pub-out pub.out \
            --sub-out sub.out \
            --netem netem.txt \
            --label delay100ms_loss1 \
            --out artifacts/xrce-helloworld-netem/metrics.json
      - name: Clear netem and collect artifacts
        if: always()
        run: |
          sudo ./tools/netem_profiles.sh clear
          mkdir -p artifacts/xrce-helloworld-netem
          mv agent.log pub.out sub.out netem.txt artifacts/xrce-helloworld-netem/ || true

      - name: Upload XRCE HelloWorld (netem) artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xrce-helloworld-netem-logs
          path: artifacts/xrce-helloworld-netem/**
  zephyr-build-baseline:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Zephyr (SDK + west workspace)
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3

      - name: Show west env and boards (for diagnosis)
        run: |
          set -euo pipefail
          west --version
          west topdir
          west list
          echo "---- west boards (first 200) ----"
          west boards | head -n 200 || true
          echo "---- search 52840 ----"
          west boards -n 52840 || true

      - name: Build Zephyr app for native_posix (baseline)
        run: |
          set -euo pipefail
          west build -b native_posix app --pristine always || {
            echo "=== CMake logs (if any) ==="
            find build -name CMakeError.log -print -exec sed -n '1,200p' {} \; || true
            find build -name CMakeOutput.log -print -exec sed -n '1,200p' {} \; || true
            exit 1
          }

      - name: Upload Zephyr build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zephyr-baseline-build
          if-no-files-found: warn
          path: |
            build/zephyr/zephyr*
            build/CMakeCache.txt
            build/CMakeFiles/**
            build/zephyr/.config
            build/zephyr/include/generated/**
            build/zephyr/zephyr.dts
            
  diag-zephyr-boards:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Setup Zephyr
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3
      - name: west update & list boards
        run: |
          set -euo pipefail
          west update
          west boards | tee boards.txt
          echo "---- grep 52840 ----"
          west boards -n 52840 | tee boards_52840.txt || true
      - name: Upload boards listing
        uses: actions/upload-artifact@v4
        with:
          name: zephyr-boards-list
          path: |
            boards.txt
            boards_52840.txt

  # 用 Zephyr 4.1 的新板名格式建置 nRF52840DK（純 printk app）
  zephyr-build-nrf52840dk:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Setup Zephyr
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3
      - name: Build app for nrf52840dk/nrf52840
        run: |
          set -euo pipefail
          west update
          west build app -b nrf52840dk/nrf52840 --pristine always
      - name: Upload ELF & config
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zephyr-nrf52840dk-elf
          if-no-files-found: warn
          path: |
            build/zephyr/zephyr.*
            build/zephyr/.config
            build/zephyr/zephyr.dts
            
  microros-zephyr-nrf52840-build-z4_0:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Setup Zephyr SDK (keep root workspace untouched)
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3

      - name: Create isolated Zephyr 4.0.0 workspace OUTSIDE repo
        run: |
          set -euo pipefail
          WS="${RUNNER_TEMP}/z4_ws"
          rm -rf "$WS"
          mkdir -p "$WS"
          echo "Workspace: $WS"
          cd "$WS"
          # 初始化在 WS（不是 repo 根目錄）
          west init -m https://github.com/zephyrproject-rtos/zephyr --mr v4.0.0 .
          west update
          west zephyr-export
          west --version
          git -C zephyr describe --tags --always || true
          west boards -n 52840 | tee boards_52840.txt || true

      - name: Install micro-ROS build deps
        run: |
          set -euo pipefail
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install --user --no-cache-dir colcon-common-extensions empy lark-parser catkin_pkg PyYAML
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Fetch micro_ros_zephyr_module (kilted) into isolated workspace
        run: |
          set -euo pipefail
          WS="${RUNNER_TEMP}/z4_ws"
          rm -rf "$WS/modules/libmicroros"
          git clone --depth 1 -b kilted https://github.com/micro-ROS/micro_ros_zephyr_module.git "$WS/modules/libmicroros"
          test -f "$WS/modules/libmicroros/prj.conf"

      - name: Build micro-ROS (nRF52840 @ Zephyr 4.0.0)
        env:
          ZEPHYR_MODULES: ${{ runner.temp }}/z4_ws/modules/libmicroros
        run: |
          set -euo pipefail
          WS="${RUNNER_TEMP}/z4_ws"
          cd "$WS"
          rm -rf build
          west build modules/libmicroros -b nrf52840dk/nrf52840 --pristine \
            -- -DDTC_OVERLAY_FILE="${GITHUB_WORKSPACE}/app/empty.overlay" \
               -DCONF_FILE="${WS}/modules/libmicroros/prj.conf;${GITHUB_WORKSPACE}/app/relax.conf"
          file build/zephyr/zephyr.elf || true
          file build/zephyr/zephyr.hex || true

      - name: Upload micro-ROS (nRF52840 @ Z4.0.0) artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: microros-nrf52840-z4_0
          if-no-files-found: warn
          path: |
            ${RUNNER_TEMP}/z4_ws/build/zephyr/zephyr.*
            ${RUNNER_TEMP}/z4_ws/build/zephyr/.config
            ${RUNNER_TEMP}/z4_ws/build/zephyr/zephyr.dts
            ${RUNNER_TEMP}/z4_ws/build/build.log
            ${RUNNER_TEMP}/z4_ws/boards_52840.txt

  microros-zephyr-stm32l475-build:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Setup Zephyr (SDK + west workspace)
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3

      - name: Install micro-ROS build deps (per module README)
        run: |
          set -euo pipefail
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install --user --no-cache-dir colcon-common-extensions empy lark-parser catkin_pkg PyYAML
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Fetch micro_ros_zephyr_module (kilted, shallow)
        run: |
          set -euo pipefail
          rm -rf modules/libmicroros
          git clone --depth 1 -b kilted https://github.com/micro-ROS/micro_ros_zephyr_module.git modules/libmicroros
          test -f modules/libmicroros/CMakeLists.txt
          test -f modules/libmicroros/prj.conf
          test -f modules/libmicroros/app.overlay

      - name: West update (ensure Zephyr modules complete)
        run: |
          set -euo pipefail
          west update
          west --version
          west list | sed -n '1,120p'

      - name: Build micro-ROS module for STM32 Disco L475 IoT (ELF only)
        env:
          ZEPHYR_MODULES: ${{ github.workspace }}/modules/libmicroros
        run: |
          set -euo pipefail
          rm -rf build
          # 這支 app.overlay 原生就是給 disco_l475_iot1，用它即可
          west build modules/libmicroros -b disco_l475_iot1 --pristine \
            -- -DDTC_OVERLAY_FILE="${GITHUB_WORKSPACE}/modules/libmicroros/app.overlay"
          file build/zephyr/zephyr.elf || true
          file build/zephyr/zephyr.hex || true

      - name: Upload micro-ROS (STM32L475) build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: microros-stm32l475-build
          if-no-files-found: warn
          path: |
            build/zephyr/zephyr.*
            build/zephyr/.config
            build/zephyr/zephyr.dts
            build/build.log

  microros-zephyr-nrf52840-build:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Setup Zephyr (SDK + west workspace)
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3

      - name: Install micro-ROS build deps (per module README)
        run: |
          set -euo pipefail
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install --user --no-cache-dir colcon-common-extensions empy lark-parser catkin_pkg
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Fetch micro_ros_zephyr_module (kilted, shallow)
        run: |
          set -euo pipefail
          rm -rf modules/libmicroros
          git clone --depth 1 -b kilted https://github.com/micro-ROS/micro_ros_zephyr_module.git modules/libmicroros
          test -f modules/libmicroros/CMakeLists.txt
          test -f modules/libmicroros/prj.conf
          test -f modules/libmicroros/app.overlay

      - name: West update (ensure Zephyr modules complete)
        run: |
          set -euo pipefail
          west update
          west --version
          west list | sed -n '1,120p'

      - name: Build micro-ROS module for nRF52840DK (ELF only)
        env:
          ZEPHYR_MODULES: ${{ github.workspace }}/modules/libmicroros
        run: |
          set -euo pipefail
          rm -rf build
          
          # 模組自帶 overlay 我們不用（會含 STM32 節點）
          sed -n '1,80p' modules/libmicroros/app.overlay || true
          
          # 關閉所有已知路徑的「警告即錯誤」開關（不同 Zephyr/腳本版本吃不同名字）
          export KCONFIG_WARNINGS_AS_ERRORS=0
          export KCONFIG_WARN_AS_ERROR=0
          export KCONFIG_WARN_TO_ERROR=0
          
          APP_PRJ="${GITHUB_WORKSPACE}/modules/libmicroros/prj.conf"
          RELAX="${GITHUB_WORKSPACE}/app/relax.conf"
          CONF_MERGED="${APP_PRJ};${RELAX}"
          
          west build modules/libmicroros -b nrf52840dk/nrf52840 --pristine \
            -- -DDTC_OVERLAY_FILE="${GITHUB_WORKSPACE}/app/empty.overlay" \
               -DCONF_FILE="${CONF_MERGED}" \
               -DEXTRA_CONF_FILE="${RELAX}" \
               -DKCONFIG_WARNINGS_AS_ERRORS=0 \
               -DKCONFIG_WARN_AS_ERROR=0 \
               -DKCONFIG_TREAT_WARNINGS_AS_ERRORS=0 \
               -DKCONFIG_WARN_TO_ERROR=0
          
          echo "===== sanity: merged .config keys ====="
          if [ -f build/zephyr/.config ]; then
            grep -E "KCONFIG_WARNINGS_AS_ERRORS=|KCONFIG_WARN_AS_ERROR=|POSIX_CLOCK=|UART_0_ENHANCED_POLL_OUT=|CLOCK_CONTROL_NRF_K32SRC_(XTAL|RC)=" build/zephyr/.config || true
          else
            echo "::notice::.config not generated (Kconfig stopped earlier)."
          fi
          
          # 存證
          file build/zephyr/zephyr.elf || true
          file build/zephyr/zephyr.hex || true
          
      - name: Upload micro-ROS (nRF52840) build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: microros-nrf52840-build
          if-no-files-found: warn
          path: |
            build/zephyr/zephyr.*
            build/zephyr/.config
            build/zephyr/zephyr.dts
            build/build.log

  microros-native-posix:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Setup Zephyr (SDK + west workspace)
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: app
          toolchains: arm-zephyr-eabi
          sdk-version: 0.16.3

      - name: Install micro-ROS build deps (per module README)
        run: |
          set -euo pipefail
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install --user --no-cache-dir colcon-common-extensions empy lark-parser catkin_pkg PyYAML
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      # 用 ZEPHYR_MODULES 暫掛模組，避免動到 west.yml（對齊你的 G 條款）
      - name: Fetch micro_ros_zephyr_module (kilted, shallow)
        run: |
          set -euo pipefail
          rm -rf modules/libmicroros
          git clone --depth 1 -b kilted https://github.com/micro-ROS/micro_ros_zephyr_module.git modules/libmicroros
          test -f modules/libmicroros/CMakeLists.txt
          test -f modules/libmicroros/prj.conf

      - name: Build micro-ROS sample (native_posix)
        env:
          ZEPHYR_MODULES: ${{ github.workspace }}/modules/libmicroros
        run: |
          set -euo pipefail
          west --version
          west list | sed -n '1,120p'
          rm -rf build
          west build modules/libmicroros -b native_posix --pristine always \
            -- -DDTC_OVERLAY_FILE="${GITHUB_WORKSPACE}/app/empty.overlay"
          file build/zephyr/zephyr.exe || true
          file build/zephyr/zephyr.elf || true
          mkdir -p artifacts/microros-native
          cp -f build/zephyr/.config artifacts/microros-native/.config || true
          cp -f build/zephyr/zephyr.* artifacts/microros-native/ || true

      - name: Build & install Micro XRCE-DDS Agent
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends git cmake build-essential libasio-dev libtinyxml2-dev
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          sudo make install
          sudo ldconfig

      - name: E2E smoke - run Agent udp4:8888 and app
        run: |
          set -euo pipefail
          MicroXRCEAgent udp4 --port 8888 -v 6 > agent.log 2>&1 &
          AG_PID=$!
          sleep 0.8
          ss -lun | grep -q ':8888' || (echo "Agent did not bind 8888/udp"; cat agent.log; exit 1)

          # 執行 micro-ROS 範例（native_posix 可直接執行）；先不強斷言，取回輸出供後續解析
          timeout 10s ./build/zephyr/zephyr.exe > app.out 2>&1 || true

          # 清理 Agent
          kill $AG_PID 2>/dev/null || true
          sleep 0.2

          mkdir -p artifacts/microros-native
          mv -f agent.log app.out artifacts/microros-native/

      - name: Upload artifacts (build + e2e logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: microros-native-posix
          path: |
            artifacts/microros-native/**
            build/zephyr/zephyr.*
            build/zephyr/.config
          if-no-files-found: warn




  # zephyr-build-microros-qemu:
  #   runs-on: ubuntu-22.04
  #   container:
  #     image: zephyrprojectrtos/zephyr-build:v0.26.17
  #     options: --user 0
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #     - uses: actions/checkout@v4
  
  #     - name: Show tool versions (container baseline)
  #       run: |
  #         python3 --version || true
  #         cmake --version || true
  #         west --version || true
  #         gcc --version || true
  
  #     - name: Install micro-ROS build deps (per module README)
  #       run: |
  #         python3 -m pip install --upgrade pip setuptools wheel
  #         pip3 install --no-cache-dir --user colcon-common-extensions empy lark-parser catkin_pkg PyYAML vcstool
  #         echo "$HOME/.local/bin" >> "$GITHUB_PATH"

  
  #     - name: Init west workspace from app/west.yml (stable fetch)
  #       run: |
  #         set -euo pipefail
  #         west init -l app
  #         # 先用最穩定的 full fetch，避免某些專案在淺抓時失敗
  #         west -v update
  #         west zephyr-export
  #         west --version
  #         west topdir
  #         west list | sed -n '1,120p'

  #     - name: Diagnose module presence (non-fatal)
  #       run: |
  #         set -uo pipefail
  #         echo "---- west list (micro*) ----"
  #         west list | grep -i micro || true
  #         echo "---- ls modules/libmicroros ----"
  #         ls -la modules/libmicroros || true
  #         for f in prj.conf src/main.c CMakeLists.txt package.xml; do
  #           [ -f "modules/libmicroros/$f" ] && echo "FOUND $f" || echo "MISSING $f"
  #         done
  #         echo "Diagnosis only."
  
  #     - name: Build micro-ROS app (native_posix)
  #       run: |
  #         set -euo pipefail
  #         mkdir -p build
  #         west -v build modules/libmicroros -b native_posix --pristine always -- \
  #           -DDTC_OVERLAY_FILE="$GITHUB_WORKSPACE/app/empty.overlay" \
  #         2>&1 | tee build/build.log
      
  #     - name: Show last lines of build.log (on failure too)
  #       if: always()
  #       run: |
  #         echo "===== tail build/build.log ====="
  #         tail -n 300 build/build.log || true
  
  #     - name: Inspect merged Kconfig (micro-ROS / transport)
  #       if: always()
  #       run: |
  #         if [ -f build/zephyr/.config ]; then
  #           grep -E "MICRO|UROS|RMW|TRANSPORT|UDP|SERIAL" build/zephyr/.config || true
  #         else
  #           echo "build/zephyr/.config not found."
  #         fi
  
  #     - name: Upload build logs & artifacts
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: microros-native-build-qemu
  #         path: |
  #           build/build.log
  #           build/zephyr/.config
  #           build/zephyr/zephyr.exe
  #           build/zephyr/zephyr.elf
  #           build/zephyr/zephyr.dts
  #         if-no-files-found: warn

  #     - name: Cleanup workspace after build (keep artifacts)
  #       if: always()
  #       run: |
  #         set -euo pipefail
  #         df -h
  #         # 現在才清理 .git 與 pip cache 釋放空間
  #         find zephyr modules -type d -name .git -prune -exec rm -rf {} +
  #         rm -rf ~/.cache/pip || true
  #         df -h
  #     - name: Show last lines of build.log (always)
  #       if: always()
  #       run: |
  #         echo "===== tail build/build.log ====="
  #         tail -n 300 build/build.log || true

  microros-hostudp-e2e:
    runs-on: ubuntu-22.04
    container:
      image: zephyrprojectrtos/zephyr-build:v0.26.17
      options: --user 0
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
  
      - name: Build & install Micro XRCE-DDS Agent
        run: |
          apt-get update
          apt-get install -y --no-install-recommends git cmake build-essential libasio-dev libtinyxml2-dev
          git clone --depth 1 https://github.com/eProsima/Micro-XRCE-DDS-Agent.git
          cd Micro-XRCE-DDS-Agent && mkdir build && cd build
          cmake ..
          make -j"$(nproc)"
          make install
          ldconfig
          
      - name: Install micro-ROS build deps (per module README)
        run: |
          python3 -m pip install --upgrade pip setuptools wheel
          pip3 install --no-cache-dir --user colcon-common-extensions empy lark-parser catkin_pkg PyYAML vcstool
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Init west workspace from app/west.yml (targeted update)
        run: |
          set -euo pipefail
          west init -l app
          # 只抓 Zephyr 本體，確保 west 的擴充子命令可用
          west -v update zephyr --fetch-opt=--depth=1 --fetch-opt=--no-tags
          # 只抓 micro-ROS Zephyr 模組（你 manifest 裡叫 micro_ros_zephyr_module）
          west -v update micro_ros_zephyr_module --fetch-opt=--depth=1 --fetch-opt=--no-tags
          west zephyr-export
          echo "== west list (確認只有兩個主要專案) =="
          west list | grep -E '(^zephyr\s|micro_ros_zephyr_module)' || true
          echo "== 空間檢查 =="
          df -h
          
      - name: Sanity check Zephyr tree
        run: |
          set -euo pipefail
          test -f zephyr/share/zephyr-package/cmake/ZephyrConfig.cmake || { echo "::error:: Zephyr CMake package not found."; exit 2; }
          test -d zephyr/scripts/west_commands && echo "west_commands present (ok)" || echo "::notice:: west_commands missing (we are not using west build anyway)."
          du -sh zephyr | awk '{print "zephyr size:", $1}'

      - name: Trim git metadata (optional, if still low on space)
        run: |
          set -euo pipefail
          df -h
          # 只保留 zephyr 與 micro_ros_zephyr_module 的工作樹，其餘沒抓也沒有
          find zephyr modules -type d -name .git -prune -exec rm -rf {} +
          df -h
    
      - name: Configure (CMake) Zephyr app
        run: |
          set -euo pipefail
          rm -rf build
          mkdir -p build
          cmake -B build -S modules/libmicroros -GNinja \
            -DBOARD=native_posix \
            -DDTC_OVERLAY_FILE="$GITHUB_WORKSPACE/app/empty.overlay" \
            -DZEPHYR_BASE="$GITHUB_WORKSPACE/zephyr"
      
      - name: Build (Ninja)
        run: |
          set -euo pipefail
          cmake --build build -v 2>&1 | tee build/build.log

      - name: Show last lines of build.log (on failure too)
        if: always()
        run: |
          echo "===== tail build/build.log ====="
          tail -n 300 build/build.log || true
  
      - name: Verify rcl headers are present (sanity check)
        run: |
          set -euo pipefail
          # micro-ROS 會被拉到 module 的內部 worktree 下
          if ! find modules/libmicroros -path '*/install/*' -name rcl.h -print -quit; then
            echo "::warning:: rcl.h not found under *install/* (colcon may package headers differently in this toolchain). Continuing."
          fi
  
      - name: Run Agent (udp4:8888) and app, collect logs
        run: |
          set -euo pipefail
          MicroXRCEAgent udp4 -p 8888 -v 6 > agent.log 2>&1 &
          AG_PID=$!
          sleep 0.8
          ss -lun | grep -q ':8888' || (echo "Agent did not bind 8888/udp"; cat agent.log; exit 1)
          timeout 10s ./build/zephyr/zephyr.exe > app.out 2>&1 || true
          kill $AG_PID 2>/dev/null || true
          sleep 0.2
  
      - name: Upload E2E artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: microros-hostudp-e2e
          path: |
            build/build.log
            build/zephyr/.config
            agent.log
            app.out
          if-no-files-found: warn
                
      - name: Cleanup workspace after build (keep artifacts)
        if: always()
        run: |
          set -euo pipefail
          df -h
          # 現在才清理 .git 與 pip cache 釋放空間
          find zephyr modules -type d -name .git -prune -exec rm -rf {} +
          rm -rf ~/.cache/pip || true
          df -h
          
      - name: Show last lines of build.log (always)
        if: always()
        run: |
          echo "===== tail build/build.log ====="
          tail -n 300 build/build.log || true
